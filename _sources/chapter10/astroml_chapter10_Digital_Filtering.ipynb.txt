{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "RY3UTJn5xS61"
   },
   "source": [
    "\n",
    "# Digital Filtering"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "rUtO_Om0xS61"
   },
   "source": [
    "## Introduction\n",
    "**Digital filtering** aims to reduce noise in time series data, or to compress data. Common examples\n",
    "include low-pass filtering, where high frequencies are suppressed, high-pass filtering, where low\n",
    "frequencies are suppressed, passband filtering, where only a finite range of frequencies is admitted,\n",
    "and a notch filter, where a finite range of frequencies is blocked. We will use a few examples to illustrate the most common\n",
    "applications of filtering.  \n",
    "Fourier analysis is one of the most useful tools for performing filtering. Numerous other techniques can be found in signal processing literature, including approaches based on the wavelets discussed in the modeling toolkit notebook.   \n",
    "  \n",
    "We emphasize that filtering always decreases the information content of data (despite making\n",
    "it appear less noisy). As we have already learned throughout previous chapters, when model\n",
    "parameters are estimated from data, raw (unfiltered) data should be used. In some sense, this is\n",
    "an analogous situation to binning data to produce a histogram-while very useful for visualization, estimates of model parameters can become biased if one is not careful."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "X56Sp8FkxS61"
   },
   "source": [
    "### Import packages and data\n",
    "In this notebook, we are going to explore the astroML.filters. We mainly use the Savitzky-Golay and the Wiener filters. The spectrum of a white dwarf data imported for this notebook is from Sloan Digital Sky\n",
    "Survey (SDSS)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "id": "Tudp07WPxS61"
   },
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "from matplotlib import pyplot as plt\n",
    "\n",
    "from astroML.fourier import PSD_continuous\n",
    "from astroML.datasets import fetch_sdss_spectrum\n",
    "\n",
    "from scipy import optimize, fftpack, interpolate\n",
    "from scipy.signal import savgol_filter\n",
    "from astroML.fourier import IFT_continuous\n",
    "from astroML.filters import wiener_filter\n",
    "from astroML.filters import min_component_filter"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "OCNftVWHxS62"
   },
   "source": [
    "## 1. Low-pass filters\n",
    "The power spectrum for common Gaussian noise is \n",
    "at and will extend to frequencies as high as\n",
    "the Nyquist limit, $f_N = 1=(2\\Delta t)$. If the data are band limited to a lower frequency, $f_c < f_N$, then\n",
    "they can be smoothed without much impact by suppressing frequencies $|f| > f_c$. Given a filter\n",
    "in frequency space, $\\Phi (f)$, we can obtain a smoothed version of data by taking the inverse Fourier\n",
    "transform of\n",
    "\n",
    "$$\\hat{Y}(f)=Y(f) \\Phi(f)$$\n",
    "\n",
    "where $Y(f)$ is the discrete Fourier transform of data. At least in principle, we could simply set\n",
    "$\\Phi(f)$ to zero for $|f| > f_c$, but this approach would result in ringing (i.e., unwanted oscillations)\n",
    "in the signal. Instead, the optimal filter for this purpose is constructed by minimizing the MISE\n",
    "between $\\hat{Y}(f)$ and $Y(f)$ (for detailed derivation see NumRec) and is called the **Wiener filter**:\n",
    "\n",
    "$$\\Phi(f) = \\frac{P_S(f)}{P_S(f)+P_N(f)}$$\n",
    "\n",
    "Here $P_S(f)$ and $P_N(f)$ represent components of a two-component (signal and noise) fit to the\n",
    "PSD of input data, $PSD_Y (f) = P_S(f) + P_N(f)$, which holds as long as the signal and noise are\n",
    "uncorrelated. We will see how the filtering works in the example below."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "Rh2qPRLhxS62"
   },
   "source": [
    "### Create the noisy data\n",
    "We are going to generate a set of noisy data as the input signal, on which we apply filters. The figure below shows the input data (200 evenly spaced points) with a narrow Gaussian peak centered at x = 20."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "id": "Yod0vWt_xS62",
    "outputId": "ce2a8ca0-e165-482a-b306-2dae0d9b2e52"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'flux')"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 360x270 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Create the noisy data\n",
    "np.random.seed(5)\n",
    "N = 2000\n",
    "dt = 0.05\n",
    "\n",
    "t = dt * np.arange(N)\n",
    "h = np.exp(-0.5 * ((t - 20.) / 1.0) ** 2)\n",
    "hN = h + np.random.normal(0, 0.5, size=h.shape)\n",
    "\n",
    "# Plot the results\n",
    "N = len(t)\n",
    "Df = 1. / N / (t[1] - t[0])\n",
    "f = fftpack.ifftshift(Df * (np.arange(N) - N / 2))\n",
    "HN = fftpack.fft(hN)\n",
    "\n",
    "fig = plt.figure(figsize=(5, 3.75))\n",
    "fig.subplots_adjust(wspace=0.05, hspace=0.35,\n",
    "                    bottom=0.1, top=0.95,\n",
    "                    left=0.12, right=0.95)\n",
    "\n",
    "# First plot: noisy signal\n",
    "ax = fig.add_subplot(111)\n",
    "ax.plot(t, hN, '-', c='gray')\n",
    "ax.plot(t, np.zeros_like(t), ':k')\n",
    "ax.text(0.98, 0.95, \"Input Signal\", ha='right', va='top',\n",
    "        transform=ax.transAxes, bbox=dict(fc='w', ec='none'))\n",
    "\n",
    "ax.set_xlim(0, 90)\n",
    "ax.set_ylim(-0.5, 1.5)\n",
    "\n",
    "ax.xaxis.set_major_locator(plt.MultipleLocator(20))\n",
    "ax.set_xlabel(r'$\\lambda$')\n",
    "ax.set_ylabel('flux')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "vV9tc7gkxS64"
   },
   "source": [
    "### Set up the Wiener filter\n",
    "We fit a model to the PSD consisting of the sum of a gaussian and white noise using **Wiener filter**. We will see this method in the later sections in this notebook.  "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "id": "iGIXtsKtxS64"
   },
   "outputs": [],
   "source": [
    "N = 2000\n",
    "\n",
    "Df = 1. / N / dt\n",
    "f = fftpack.ifftshift(Df * (np.arange(N) - N / 2))\n",
    "HN = fftpack.fft(hN)\n",
    "\n",
    "# apply the Wiener filter\n",
    "h_smooth, PSD, P_S, P_N, Phi = wiener_filter(t, hN, return_PSDs=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "RSdbDG5dxS64"
   },
   "source": [
    "### Set up the Savitzky-Golay filter\n",
    "We use a fourth-order **Savitzky-Golay** filter with a window size of $\\Delta \\lambda = 10$ to filter the vales. \n",
    "The Savitzky-Golay filter is a very simple but powerful method as a low-pass filter. It fits low-order polynomials\n",
    "to data (in the time domain) using sliding windows (it is also known as the least-squares filter).\n",
    "For a detailed discussion, see NumRec."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "id": "Htv8fcpcxS64"
   },
   "outputs": [],
   "source": [
    "# apply the Savitzky-Golay filter\n",
    "h_sg = savgol_filter(hN, window_length=201, polyorder=4, mode='mirror')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "v0acUi29xS65"
   },
   "source": [
    "### Show filtered signal\n",
    "Plot below shows noisy signal after filtering. \n",
    "* Result from Wiener filter is shown in black.\n",
    "* Result from Savitzky-Golay filter is shown in gray.  \n",
    "\n",
    "The Gaussian peak at x=20 is clearly seen in both curves."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "id": "NtV9u_PixS65",
    "outputId": "170a42af-8047-4378-e68e-b23cb15afe12"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'flux')"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Second plot: filtered signal\n",
    "ax = plt.subplot(111)\n",
    "ax.plot(t, np.zeros_like(t), ':k', lw=1)\n",
    "ax.plot(t, h_smooth, '-k', lw=1.5, label='Wiener')\n",
    "ax.plot(t, h_sg, '-', c='gray', lw=1, label='Savitzky-Golay')\n",
    "\n",
    "ax.text(0.98, 0.95, \"Filtered Signal\", ha='right', va='top',\n",
    "        transform=ax.transAxes)\n",
    "ax.legend(loc='upper right', bbox_to_anchor=(0.98, 0.9), frameon=False)\n",
    "\n",
    "ax.set_xlim(0, 90)\n",
    "ax.set_ylim(-0.5, 1.5)\n",
    "\n",
    "ax.xaxis.set_major_locator(plt.MultipleLocator(20))\n",
    "ax.set_xlabel(r'$\\lambda$')\n",
    "ax.set_ylabel('flux')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "v4S1w9XdxS65"
   },
   "source": [
    "### Show filtered PSD\n",
    "* The upper panel shows the input power spectral density (PSD) distribution.  \n",
    "* The lower panel shows the Wiener-filtered power spectral density (PSD) distributions.  \n",
    "\n",
    "The two curves in the upper panel represent two-component fit to PSD given by equation\n",
    "\n",
    "$$\\Phi(f) = \\frac{P_S(f)}{P_S(f)+P_N(f)}$$"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "id": "WMuHlbmxxS65",
    "outputId": "6e335310-ce32-47fd-cee0-a30b8c038649"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, '$PSD(f)$')"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 360x270 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Plot the results\n",
    "N = len(t)\n",
    "Df = 1. / N / (t[1] - t[0])\n",
    "f = fftpack.ifftshift(Df * (np.arange(N) - N / 2))\n",
    "HN = fftpack.fft(hN)\n",
    "\n",
    "fig = plt.figure(figsize=(5, 3.75))\n",
    "fig.subplots_adjust(wspace=0.05, hspace=0.35,\n",
    "                    bottom=0.1, top=0.95,\n",
    "                    left=0.12, right=0.95)\n",
    "\n",
    "# Third plot: Input PSD\n",
    "ax = fig.add_subplot(211)\n",
    "ax.scatter(f[:N // 2], PSD[:N // 2], s=9, c='k', lw=0)\n",
    "ax.plot(f[:N // 2], P_S[:N // 2], '-k')\n",
    "ax.plot(f[:N // 2], P_N[:N // 2], '-k')\n",
    "\n",
    "ax.text(0.98, 0.95, \"Input PSD\", ha='right', va='top',\n",
    "        transform=ax.transAxes)\n",
    "\n",
    "ax.set_ylim(-100, 3500)\n",
    "ax.set_xlim(0, 0.9)\n",
    "\n",
    "ax.yaxis.set_major_locator(plt.MultipleLocator(1000))\n",
    "ax.xaxis.set_major_locator(plt.MultipleLocator(0.2))\n",
    "ax.set_xlabel('$f$')\n",
    "ax.set_ylabel('$PSD(f)$')\n",
    "\n",
    "# Fourth plot: Filtered PSD\n",
    "ax = fig.add_subplot(212)\n",
    "filtered_PSD = (Phi * abs(HN)) ** 2\n",
    "ax.scatter(f[:N // 2], filtered_PSD[:N // 2], s=9, c='k', lw=0)\n",
    "\n",
    "ax.text(0.98, 0.95, \"Filtered PSD\", ha='right', va='top',\n",
    "        transform=ax.transAxes)\n",
    "\n",
    "ax.set_ylim(-100, 3500)\n",
    "ax.set_xlim(0, 0.9)\n",
    "\n",
    "ax.yaxis.set_major_locator(plt.MultipleLocator(1000))\n",
    "ax.xaxis.set_major_locator(plt.MultipleLocator(0.2))\n",
    "ax.set_xlabel('$f$')\n",
    "ax.set_ylabel('$PSD(f)$')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "o4jfFOcTxS66"
   },
   "source": [
    "### Wiener Filter and kernel smoothing Connection\n",
    "There is an interesting connection between the kernel density estimation method discussed in the KDE notebook\n",
    "and Wiener filtering. By the convolution theorem, the Wiener-filtered result is equivalent to the\n",
    "convolution of the unfiltered signal with the inverse Fourier transform of $\\Phi(f)$.  \n",
    "\n",
    "This convolution is equivalent to kernel density estimation. When Wiener filtering is viewed in this way, it effectively says that we believe the signal is as wide as the central\n",
    "peak, and the statistics of the noise are such that the minor peaks in the\n",
    "wings work to cancel out noise in the major peak.  \n",
    "\n",
    "Hence, the modeling of the PSD in the frequency\n",
    "domain via \n",
    "\n",
    "$$\\Phi(f) = \\frac{P_S(f)}{P_S(f)+P_N(f)}$$ \n",
    "\n",
    "corresponds to choosing the optimal kernel width. Just as detailed modeling\n",
    "of the Wiener filter is not of paramount importance, the choice of kernel is not either.\n",
    "\n",
    "We will use the same data as the previous Wiener filter figure as an example to explore this connection."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "F7xOtMVCxS66"
   },
   "source": [
    "### Find effective kernel"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "id": "z2Ku2w21xS66"
   },
   "outputs": [],
   "source": [
    "# inverse fourier transform Phi to find the effective kernel\n",
    "t_plot, kernel = IFT_continuous(f, Phi)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "OoRvHj9ixS66"
   },
   "source": [
    "### perform kernel smoothing\n",
    "This is faster in frequency\n",
    "space (i.e. using the standard Wiener filter above) but we will do it in the slow & simple way here to demonstrate the equivalence explicitly."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {
    "id": "XxHPo9gExS66"
   },
   "outputs": [],
   "source": [
    "kernel_func = interpolate.interp1d(t_plot, kernel.real)\n",
    "\n",
    "t_eval = np.linspace(0, 90, 1000)\n",
    "t_KDE = t_eval[:, np.newaxis] - t\n",
    "t_KDE[t_KDE < t_plot[0]] = t_plot[0]\n",
    "t_KDE[t_KDE > t_plot[-1]] = t_plot[-1]\n",
    "F = kernel_func(t_KDE)\n",
    "\n",
    "h_smooth = np.dot(F, hN) / np.sum(F, 1)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "3X8gmvTrxS66"
   },
   "source": [
    "### Show kernel and smoothing results\n",
    "* The left panel shows the inverse Fourier transform of the Wiener filter $\\Phi(f)$ applied in the sample data we used previously.  \n",
    "* The right panel shows the data smoothed by this kernel, which is equivalent to the Wiener filter smoothing in the previous figure.  \n",
    "\n",
    "By the convolution theorem, the Wiener-filtered result is equivalent to the convolution of the unfiltered signal with\n",
    "the kernel shown above, and thus Wiener filtering and kernel density estimation (KDE) are directly related. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {
    "id": "0PiN2ZBExS66",
    "outputId": "c0d7be9a-7290-4ac2-bfbb-98963289ad33"
   },
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAqAAAAEgCAYAAABrZMGAAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjMuMywgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy/Il7ecAAAACXBIWXMAAAsTAAALEwEAmpwYAABby0lEQVR4nO3deXhU1fnA8e9LEvadsCYk7CD7EnYUBGRRBKsIuFJbhapYq4hLtbhiafXnUqtVCihVFBDEIoKIFJBFkIDsO5iEAAXCJlsCJO/vj5lJJyHLJJk1vJ/nmYeZe889552Z5OblnHvPEVXFGGOMMcYYfykR6ACMMcYYY8zVxRJQY4wxxhjjV5aAGmOMMcYYv7IE1BhjjDHG+JUloMYYY4wxxq8sATXGGGOMMX5lCagxxgQhEZkqIkdFZGsu+3uJyGkR2eh8jHfbN0BEdonIXhF52n9RG2OMZ8TmATXGmOAjItcBZ4F/qWrLHPb3Ap5Q1UHZtocBu4EbgGRgHXCHqm73dczGGOMp6wE1xpggpKrfAycKcWgnYK+q7lfVi8AMYIhXgzPGmCIKD3QARREZGan16tULdBjGmBC0fv36FFWtHug4iqiriGwCDuHoDd0GRAEH3MokA51zOlhERgGjAMqVK9ehWbNmPg7XGFMcFeZ8GtIJaL169YiPjw90GMaYECQiiYGOoYg2ALGqelZEbgS+BBoXpAJVnQRMAoiLi1M7nxpjCqMw51MbgjfGmBCkqr+o6lnn8wVAhIhEAgeBum5Fo53bjDEmaFgCaowxIUhEaomIOJ93wnE+P47jpqPGIlJfREoCI4B5gYvUGGOuFNJD8MYYU1yJyGdALyBSRJKB54EIAFV9HxgKPCgil4ELwAh1TGtyWUTGAIuAMGCq89pQY4wJGpaAGmNMEFLVO/LZ/3fg77nsWwAs8EVcxhjjDTYEb4wxxhhj/MoSUGOMMcYY41eWgBpjjDHGGL+yBNQYY4wxxviVJaDGGGOMMcavLAE1xhhjjDF+ZQmoMcYYY4zxK0tAjQmgsLAw2rZtm/mYOHEiACtWrKBFixa0bduWCxcuMG7cOFq0aMG4ceMK3Marr76a5XW3bt2KHPdjjz3GW2+9lfm6f//+3H///Zmvx44dyxtvvMG8efMy35MxxnhL+fLlM58vWLCAJk2akJhY4OXIPfbRRx8xZswYn9XviS+//JLt27dnvu7Vqxfx8fFXlIuPj+f3v/+9P0MrFJuI3pgAKlOmDBs3brxi+/Tp03nmmWe4++67AZg0aRInTpwgLCyswG28+uqr/PGPf8x8vXr16kLH69K9e3dmzZrFH/7wBzIyMkhJSeGXX37J0sabb75Jly5dGDx4cJHby0t6enqhPhdjTOhbsmQJv//971m0aBGxsbEeHROq54wvv/ySQYMG0bx58zzLxcXFERcX56eoCs96QI0JMpMnT2bWrFn86U9/4q677mLw4MGcPXuWDh06MHPmTI4dO8Ztt91Gx44d6dixI6tWrQLg7Nmz3HfffbRq1YrWrVszZ84cnn76aS5cuEDbtm256667gP/1HIwYMYKvv/46s91f//rXzJ49m/T0dMaNG0fHjh1p3bo1H3zwwRUxduvWjR9++AGAbdu20bJlSypUqMDJkydJS0tjx44dtG/fPkuvQW5xv/DCC/zmN7+hV69eNGjQgL/97W+Z7XzyySd06tSJtm3bMnr0aNLT0zPfw9ixY2nTpk1mHMaYq8v333/PAw88wPz582nYsCHg+TmjfPnyPPvss7Rp04YuXbpw5MgRIPfzVG6WL1+eOYLVrl07zpw5w7Jly+jZsydDhgyhQYMGPP3000yfPp1OnTrRqlUr9u3bB0BCQgK9e/emdevW9OnTh6SkpFy3r169mnnz5jFu3Djatm2bWcfnn39Op06daNKkCStWrABg2bJlDBo0CMj7/Pryyy/TtGlTevTowR133MHrr7/ura/GM6oaso8OHTqoMaGsRIkS2qZNm8zHjBkzVFV15MiR+vnnn2eWK1euXObzO+64Q1esWKGqqomJidqsWTNVVX3yySf10UcfzSx34sSJK451f/3FF1/ovffeq6qqaWlpGh0drefPn9cPPvhAX375ZVVVTU1N1Q4dOuj+/fuviL1evXqamJio77//vv7jH//Q5557Tr/++mtduXKl9ujRQ1VVP/zwQ3344YfzjPv555/Xrl27ampqqh47dkyrVq2qFy9e1O3bt+ugQYP04sWLqqr64IMP6rRp01RVFdCZM2cW4JO+EhCvQXAeC5aHnU9NKAkPD9cqVaropk2bMrcV5JwB6Lx581RVddy4cZnnvNzOU+7nMneDBg3SlStXqqrqmTNn9NKlS7p06VKtVKmSHjp0SFNTU7VOnTo6fvx4VVV96623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28xVbt++fcTGxhIRERHoUDxiUzGZq813331H/fr1ue6662jfvn1IXBvp6v107/UriIYNG7J///6QSbhzM3v2bPr37595Z7q7GjVqsHLlSlatWkVCQgKDBg0CHL2Wv//97/nnP//pURtHjx4lJSWF5s2z39bh0KlTJ86dO+fRMPx///tf7rrrLmbPns3EiRO58847SU9P9yiOgnr55ZcZM2YM1apVy7dshw4dqFSpEsuWLfNa+1OmTGHQoEHExcWxYcMGr9SZlJTEqFGjeOyxx0hJSfFKnb7krwR0HdBYROqLSElgBDDPT22bILZv376QGH53sQTUXE0SEhK44447+OSTT0hOTubee++lb9++QT9H5p49e2jcuHGhjy9fvjyVK1fm4MHQ7if57LPPuOOOO3LdLyI0aNCAUqVKZdk+cOBA1q9fz/Hjx/Nt44cffqBLly6UKJFzOiEiDB06lM8//zzfuv7v//6P22+/neuvv567776bihUr8sUXX+R7nMuZM2cYPXo0Xbt2Zdq0abmW27NnD/Pnz+exxx7zqF4RYeTIkUyfPt3jWPLyyy+/8OSTT/Kf//yH1157jccff7zIdZ47d47evXtTvXp1Ll26RI8ePYI+CfVLAqqql4ExwCJgBzBLVbeJyEsiMhhARDqKSDJwO/CBiATnVcvGq4pynVYgNGjQgOPHjwf9H2Bjiury5cvceeedPPXUU/Tu3RsR4fHHH6d3795e+YPpS1u3buWaa64pUh3XXHNNgW6eUVWWLl3Kjz/+WKR2vSU5OZnNmzczcODAAh9btmxZ+vbty1dffZVv2byG311uv/32fIf0U1JSmDJlCk8++STgSPqefPJJ3n77bY9izsjIYOjQoaSlpfHSSy/xyiuv5Hrd5ksvvcSjjz5aoNX3hgwZwvz5873SIzt58mT69etH8+bNueeee9i3b1+R52d9++23iYuLY8KECfz9739n8ODBjBw5MqhnIEBVQ/bRoUMHNaHrxIkTCujrr78e6FA8Nnv2bAX0p59+CnQopoiAeA2C81iwPLKfT8ePH6833HCDpqenZ9l++vRprVOnjq5atcqjzzktLU1TU1M9KustAwYM0C+//LJIdTzxxBM6YcIEj8pmZGToPffco82bN9eYmBidOHFikdr2htdff13vu+++Qh//wQcf6N13351vue7du+uSJUvyLJOenq7R0dG6bdu2XMs899xz+sADD2TZlpaWppGRkbp///5845g0aZJ26dJFL126pKqqe/fu1Ro1aujKlSuzlNu+fbtWr15df/nll3zrzK5ly5Ye/9zn5ZprrskS12OPPabPP/98oeu7fPmy1q1bVzds2JC57eLFi9qqVSudPXt2UUL1yIULFwp1Pg34Sa8oD0tAQ9u6desU0Llz5wY6FI/99NNPCuisWbMCHYopIktAcz+ffv/991qrVi09dOhQjp/d9OnTtUOHDlckp9l9/PHHWqlSJa1QoYK+9957eZb1loyMDK1evboeOHCgSPVMnz5db7vtNo/Kfvrpp9qqVSu9cOGCJicna2RkZJ7Jlj+0b99eFy9eXOjjd+7cqXXr1tWMjIxcy6Smpmq5cuX0zJkz+db3hz/8QcePH5/jvpMnT2q1atV03759V+x78MEH9ZVXXsmz7osXL2psbKyuXr06y/avvvpK69atq0ePHs3cdtNNNxW60+PZZ5/Vp556qlDHumzdulWjo6Oz/O6sWrVKW7RoUeg6Fy1apHFxcVdsX7p0qcbGxvr8P4CjRo2yBNSElhkzZiigmzdvDnQoHjtz5owCHveMmOBlCWjO59Pjx49rTEyMzp8/P9fPLiMjQ7t27apTp07NtcxPP/2kkZGRunXrVt23b5/Wr19fP/3001zLe8vmzZu1QYMGeSZOntixY4fWr18/33LHjh3TmjVr6tq1azO3/fnPf9aRI0cWqf2i2L59u9auXVsvX75c6DoyMjK0Zs2aefY+rl69Wtu1a+dRfRs3btSoqCi9ePHiFftefPFFveeee3I8buXKlXrNNdfk+X1+/PHH2rNnzxz3PfXUU9qvXz9NS0vTjz/+WBs3bqxpaWkexZzd2rVrtVmzZoU61uWFF17QP/zhD1m2paena9WqVfXgwYOFqvORRx7RP//5zznu69evn06ePLlQ9Xpi+fLlGh0dbQmoCS0TJkxQQM+ePRvoUAokKioqoH9cjHeEQgIKDAB2AXuBp3PYXwqY6dy/Fqjntu8Z5/ZdQP/82urQoYNeunRJb7jhBh07dmy+n9+PP/6otWvXznEo89y5c3rNNdfoxx9/nLltw4YNXumZzMjI0BUrVujTTz+tDzzwgH788cdZEq2JEyfqgw8+WKQ2VB3DmpUrV861F9jl7rvv1sceeyzLtmPHjmnlypU1JSXF4/bi4+N13LhxumjRokLF6+7ZZ5/Vxx9/vMj1DBs2TD/88MNc97/++uv68MMPe1xfz549debMmVm2uXo/d+/eneMx6enpGhMTo5s2bcp1f4sWLXThwoU57r906ZL+6le/0po1a2qdOnVyrccT6enpWqtWLd2zZ0+h62jRosUVlwWoqt5yyy2F+g9aRkaGNmjQINf3tXTpUm3SpEmR/jOSl969e+u//vWvQp1PQ24eUFN87Nu3j1q1alGuXLlAh1IgTZo0Yffu3YEOwxRzHi5h/FvgpKo2At4E/uI8tjmO2UZa4Ehi33PWl6tLly4xdOhQwsPDmThxYr7xdezYkRtuuIFXX331in3jxo2jbdu23HXXXZnb2rVrx0MPPcQjjzySb905ycjI4JNPPqF169aMHj2aiIgI2rRpwz//+U86derEjh07SEtL44MPPmDkyJGFasNdWFgYffv25dtvv821zDfffMPKlSt5+eWXs2yPjIykf//+Hs+luX79egYMGEDp0qV54IEHeOeddwod98WLF/nwww+98hn07NmT5cuX57p/9erVdO/e3eP6HnvsMSZMmJBlkvlXXnmFwYMH5zprQYkSJRgxYgQzZszIcf/XX39NREQE/fv3z3F/eHg4c+bMYdWqVezZs4fWrVt7HG9Osdx00018/fXXhTp+9+7dnDhx4oolSwF69erF0qVLC1xnQkICFy5coFWrVjnu79mzJ1WqVOHLL78scN352bp1Kzt27GD48OGFq6CgGWswPawHNLT17NlTu3fvHugwCmz06NFatWrVQIdhiogg7wEFugKL3F4/AzyTrcwioKvzeTiQAkj2su7lcnuUKFFCH3/88QINTx48eFCrVaumu3btytw2d+5crVevnp46deqK8qmpqdq4cWOdN2+ex22oqiYnJ2u3bt20S5cu+s0332QZjs3IyNAPPvhAq1Wrpm3atPH4uk1PTJ48WYcPH57jvl9++UVjY2Nz7bGcNWuW9uvXL982MjIytHPnzvrRRx+pqurPP/+stWvX1mXLlhUq5k8++USvv/76Qh2b3ZYtW7Rhw4Y57svIyNBatWppQkKCx/VlZGRo37599YUXXlBVx7WLNWvWzHKNZk42bNig9evXv2IY3nUpyIwZMzyOoajmzp2rffr0KdSxefXOb9q0SRs3blzgOmfMmKG/+tWv8iwza9Ys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\n",
      "text/plain": [
       "<Figure size 720x316.8 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Plot the results\n",
    "fig = plt.figure(figsize=(10, 4.4))\n",
    "fig.subplots_adjust(left=0.1, right=0.95, wspace=0.25,\n",
    "                    bottom=0.15, top=0.9)\n",
    "\n",
    "# First plot: the equivalent Kernel to the WF\n",
    "ax = fig.add_subplot(121)\n",
    "ax.plot(t_plot, kernel.real, '-k')\n",
    "ax.text(0.95, 0.95, \"Effective Wiener\\nFilter Kernel\",\n",
    "        ha='right', va='top', transform=ax.transAxes)\n",
    "\n",
    "ax.set_xlim(-10, 10)\n",
    "ax.set_ylim(-0.05, 0.45)\n",
    "ax.set_xlabel(r'$\\lambda$')\n",
    "ax.set_ylabel(r'$K(\\lambda)$')\n",
    "\n",
    "# Second axes: Kernel smoothed results\n",
    "ax = fig.add_subplot(122)\n",
    "ax.plot(t_eval, h_smooth, '-k', lw=1)\n",
    "ax.plot(t_eval, 0 * t_eval, '-k', lw=1)\n",
    "ax.text(0.95, 0.95, \"Kernel smoothing\\nresult\",\n",
    "        ha='right', va='top', transform=ax.transAxes)\n",
    "\n",
    "ax.set_xlim(0, 90)\n",
    "ax.set_ylim(-0.5, 1.5)\n",
    "\n",
    "ax.set_xlabel('$\\lambda$')\n",
    "ax.set_ylabel('flux')\n",
    "\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "9CbCW5s_xS66"
   },
   "source": [
    "## 2. High-pass filters\n",
    "The most common example of high-pass filtering in astronomy is baseline estimation in spectral\n",
    "data. Unlike the case of low-pass filtering, here there is no universal filter recipe. Baseline estimation\n",
    "is usually the first step toward the estimation of model parameters (e.g. location, width, and strength of spectral lines). In such cases, the best approach might be full modeling and\n",
    "marginalization of baseline parameters as nuisance parameters at the end of analysis.  \n",
    "  \n",
    "A simple iterative technique for high-pass filtering, called **minimum component filtering**, is discussed\n",
    "in detail in WJ03. These are the **main steps**:\n",
    "1. Determine baseline: exclude or mask regions where signal is clearly evident and fit a baseline\n",
    "model (e.g., a low-order polynomial) to the unmasked regions.\n",
    "2. Get FT for the signal: after subtracting the baseline fit in the unmasked regions (i.e., a linear\n",
    "regression fit), apply the discrete Fourier transform.\n",
    "3. Filter the signal: remove high frequencies using a low-pass filter (e.g., Wiener filter), and\n",
    "inverse Fourier transform the result.\n",
    "4. Recombine the baseline and the filtered signal: add the baseline fit subtracted in step 2 to\n",
    "the result from step 3. This is the minimum component filtering estimate of baseline.  \n",
    "  \n",
    "In the next two examples, we will see the application of a minimum component filter to the spectrum of a white dwarf."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "Ts8lXF3hxS66"
   },
   "source": [
    "## Example 1 (Show steps)\n",
    "### Fetch the data\n",
    "We first fetch the spectrum data from SDSS database for use. The intermediate steps of the minimum component filter procedure applied to the spectrum of a white dwarf from the SDSS data set (mjd= 52199, plate=659, fiber=381)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {
    "id": "WX3tvLb7xS66",
    "outputId": "184871ff-d340-4d1c-d39c-f4ecfec41177"
   },
   "outputs": [],
   "source": [
    "# Fetch the spectrum from SDSS database\n",
    "plate = 659\n",
    "mjd = 52199\n",
    "fiber = 381\n",
    "\n",
    "data = fetch_sdss_spectrum(plate, mjd, fiber)\n",
    "\n",
    "lam = data.wavelength()\n",
    "spec = data.spectrum"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "uzcLa8RvxS67"
   },
   "source": [
    "### Pre-process the data\n",
    "Wavelengths we get are logorithmically spaced: we will work in log(lam)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {
    "id": "KjdsQTRJxS67"
   },
   "outputs": [],
   "source": [
    "def preprocess(lam, spec):\n",
    "    loglam = np.log10(lam)\n",
    "\n",
    "    flag = (lam > 4000) & (lam < 5000)\n",
    "    lam = lam[flag]\n",
    "    loglam = loglam[flag]\n",
    "    spec = spec[flag]\n",
    "\n",
    "    lam = lam[:-1]\n",
    "    loglam = loglam[:-1]\n",
    "    spec = spec[:-1]\n",
    "    \n",
    "    return [lam, loglam, spec]\n",
    "\n",
    "[lam, loglam, spec] = preprocess(lam, spec)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "8J04jlS3xS67"
   },
   "source": [
    "### Apply minimum component filtering steps"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "FkglHwn3xS67"
   },
   "source": [
    "First step: mask-out significant features"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {
    "id": "beRD9woQxS67"
   },
   "outputs": [],
   "source": [
    "feature_mask = (((lam > 4080) & (lam < 4130)) |\n",
    "                ((lam > 4315) & (lam < 4370)) |\n",
    "                ((lam > 4830) & (lam < 4900)))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "zEoHf1TFxS67"
   },
   "source": [
    "Second step: fit a line to the unmasked portion of the spectrum"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {
    "id": "iGTGscg4xS67",
    "outputId": "7d8064b0-7076-4a32-85d0-c3d750411fd2"
   },
   "outputs": [],
   "source": [
    "XX = loglam[:, None] ** np.arange(2)\n",
    "beta = np.linalg.lstsq(XX[~feature_mask], spec[~feature_mask], rcond=None)[0]\n",
    "\n",
    "spec_fit = np.dot(XX, beta)\n",
    "spec_patched = spec - spec_fit\n",
    "spec_patched[feature_mask] = 0"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "SfSdQzOAxS67"
   },
   "source": [
    "Third step: Fourier transform the patched spectrum"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {
    "id": "J1-cXKPTxS68"
   },
   "outputs": [],
   "source": [
    "N = len(loglam)\n",
    "df = 1. / N / (loglam[1] - loglam[0])\n",
    "f = fftpack.ifftshift(df * (np.arange(N) - N / 2.))\n",
    "spec_patched_FT = fftpack.fft(spec_patched)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "0VlkhtydxS68"
   },
   "source": [
    "Fourth step: Low-pass filter on the transform"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {
    "id": "T6PPvAOvxS68"
   },
   "outputs": [],
   "source": [
    "filt = np.exp(- (0.01 * (abs(f) - 100.)) ** 2)\n",
    "filt[abs(f) < 100] = 1\n",
    "\n",
    "spec_filt_FT = spec_patched_FT * filt"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "D8qhl6V9xS68"
   },
   "source": [
    "Fifth step: inverse Fourier transform, and add back the fit"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {
    "id": "tzK1151FxS68"
   },
   "outputs": [],
   "source": [
    "spec_filt = fftpack.ifft(spec_filt_FT)\n",
    "spec_filt += spec_fit"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "ipNe0YhKxS68"
   },
   "source": [
    "### Show filter result\n",
    "* The top panel shows the input spectrum; the masked sections of the input spectrum are shown by thin lines (i.e., step 1 of the process). \n",
    "* The bottom panel shows the PSD of the masked spectrum, after the linear fit has been subtracted (gray line). \n",
    "* A simple low-pass filter (dashed line) is applied, and the resulting filtered spectrum (dark line) is used to construct the result shown in the next figure."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {
    "id": "m_SNHlE2xS68",
    "outputId": "8f496cd1-6cd7-4974-c3a1-d8044b89749a"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'scaled $PSD(f)$')"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 360x270 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# plot results\n",
    "fig = plt.figure(figsize=(5, 3.75))\n",
    "fig.subplots_adjust(hspace=0.45)\n",
    "\n",
    "ax = fig.add_subplot(211)\n",
    "ax.plot(lam, spec, '-', c='gray')\n",
    "ax.plot(lam, spec_patched + spec_fit, '-k')\n",
    "\n",
    "ax.set_ylim(25, 110)\n",
    "ax.set_xlim(4000, 5000)\n",
    "\n",
    "ax.set_xlabel(r'$\\lambda\\ {\\rm(\\AA)}$')\n",
    "ax.set_ylabel('flux')\n",
    "\n",
    "ax = fig.add_subplot(212)\n",
    "factor = 15 * (loglam[1] - loglam[0])\n",
    "ax.plot(fftpack.fftshift(f),\n",
    "        factor * fftpack.fftshift(abs(spec_patched_FT) ** 1),\n",
    "        '-', c='gray', label='masked/shifted spectrum')\n",
    "ax.plot(fftpack.fftshift(f),\n",
    "        factor * fftpack.fftshift(abs(spec_filt_FT) ** 1),\n",
    "        '-k', label='filtered spectrum')\n",
    "ax.plot(fftpack.fftshift(f),\n",
    "        fftpack.fftshift(filt), '--k', label='filter')\n",
    "\n",
    "ax.set_xlim(0, 2000)\n",
    "ax.set_ylim(0, 1.1)\n",
    "\n",
    "ax.set_xlabel('$f$')\n",
    "ax.set_ylabel('scaled $PSD(f)$')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "fX9AKH9XxS69"
   },
   "source": [
    "## Example 2 (use package)\n",
    "### Fetch the data\n",
    "We follow the same process to analyze the same white dwarf example. Here instead of explicitly applying steps, we call function *min_component_filter* to achieve the same goal."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {
    "id": "_877Orm7xS69"
   },
   "outputs": [],
   "source": [
    "plate = 659\n",
    "mjd = 52199\n",
    "fiber = 381\n",
    "\n",
    "data = fetch_sdss_spectrum(plate, mjd, fiber)\n",
    "\n",
    "lam = data.wavelength()\n",
    "spec = data.spectrum"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "IU9mYPyexS69"
   },
   "source": [
    "### Pre-process the data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {
    "id": "SRil6iHMxS69"
   },
   "outputs": [],
   "source": [
    "[lam, loglam, spec] = preprocess(lam,spec)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "YWBCxlnaxS69"
   },
   "source": [
    "### Apply minimum component filtering using function\n",
    "The function used here is *min_component_filter* in *astroML.filters* package."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {
    "id": "U5fxYgtWxS69"
   },
   "outputs": [],
   "source": [
    "feature_mask = (((lam > 4080) & (lam < 4130)) |\n",
    "                ((lam > 4315) & (lam < 4370)) |\n",
    "                ((lam > 4830) & (lam < 4900)))\n",
    "\n",
    "spec_filtered = min_component_filter(loglam, spec, feature_mask, fcut=100)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "OfgWgHbwxS69"
   },
   "source": [
    "### Compute PSD of filtered and unfiltered versions"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {
    "id": "e86wfwZExS69"
   },
   "outputs": [],
   "source": [
    "f, spec_filt_PSD = PSD_continuous(loglam, spec_filtered)\n",
    "f, spec_PSD = PSD_continuous(loglam, spec)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "D_xm9FppxS69"
   },
   "source": [
    "### Show filter result\n",
    "* The upper panel shows a portion of the input spectrum, along with the continuum computed via the minimum component filtering procedure described above (See the previous figure). \n",
    "* The lower panel shows the PSD for both the input spectrum and the filtered result."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {
    "id": "BCvqIFTSxS69"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(0.0, 2000.0)"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 360x270 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Plot the results\n",
    "fig = plt.figure(figsize=(5, 3.75))\n",
    "fig.subplots_adjust(hspace=0.45)\n",
    "\n",
    "# Top panel: plot noisy and smoothed spectrum\n",
    "ax = fig.add_subplot(211)\n",
    "ax.plot(lam, spec, '-', c='gray', lw=1)\n",
    "ax.plot(lam, spec_filtered, '-k')\n",
    "\n",
    "ax.text(0.97, 0.93, \"SDSS white dwarf\\n %i-%i-%i\" % (mjd, plate, fiber),\n",
    "        ha='right', va='top', transform=ax.transAxes)\n",
    "\n",
    "ax.set_ylim(25, 110)\n",
    "ax.set_xlim(4000, 5000)\n",
    "\n",
    "ax.set_xlabel(r'$\\lambda\\ {\\rm (\\AA)}$')\n",
    "ax.set_ylabel('flux')\n",
    "\n",
    "# Bottom panel: plot noisy and smoothed PSD\n",
    "ax = fig.add_subplot(212, yscale='log')\n",
    "ax.plot(f, spec_PSD, '-', c='gray', lw=1)\n",
    "ax.plot(f, spec_filt_PSD, '-k')\n",
    "\n",
    "ax.set_xlabel(r'$f$')\n",
    "ax.set_ylabel('$PSD(f)$')\n",
    "ax.set_xlim(0, 2000)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "4Rq-shUYxS6-"
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "colab": {
   "name": "Chapter10.2.5.ipynb",
   "provenance": []
  },
  "jupytext": {
   "formats": "ipynb,md:myst"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.1"
  },
  "toc": {
   "base_numbering": 1,
   "nav_menu": {},
   "number_sections": true,
   "sideBar": true,
   "skip_h1_title": false,
   "title_cell": "Table of Contents",
   "title_sidebar": "Contents",
   "toc_cell": false,
   "toc_position": {},
   "toc_section_display": true,
   "toc_window_display": false
  }
 },
 "nbformat": 4,
 "nbformat_minor": 1
}
